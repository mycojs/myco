name = "Runtime Error Handling"
description = "Test error conditions across all Myco interfaces - each test should fail with specific uncaught errors"

[[tests]]
name = "read non-existent file"
script = "read_nonexistent_file.ts"
expected_stdout = "Testing read non-existent file\n"
expected_stderr_pattern = """\
Error: Failed to read file '\\./tests/runtime/errors/fixtures/tmp/nonexistent_file\\.txt': No such file or directory \\(os error 2\\)
\\s+at Object\\.read \\(<anonymous>:\\d+:\\d+\\)
\\s+at default \\(/.+/read_nonexistent_file\\.ts:6:21\\)
\\s+at async myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "write to read-only path"
script = "write_readonly_path.ts"
expected_stdout = "Testing write to read-only path\n"
expected_stderr_pattern = """\
Error: Parent path is not a directory: /dev/null
\\s+at Object\\.requestWrite \\(<anonymous>:\\d+:\\d+\\)
\\s+at default \\(/.+/write_readonly_path\\.ts:10:41\\)
\\s+at async myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "invalid read operation"
script = "invalid_read_operation.ts"
expected_stdout = "Testing invalid read operation\n"
expected_stderr_pattern = """\
Error: Path is not a file: ./tests/runtime/errors/fixtures
\\s+at Object\\.requestRead \\(<anonymous>:\\d+:\\d+\\)
\\s+at default \\(/.+/invalid_read_operation\\.ts:5:40\\)
\\s+at myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "invalid directory operation"
script = "invalid_directory_operation.ts"
expected_stdout = "Testing invalid directory operation\n"
expected_stderr_pattern = """\
Error: Failed to remove directory '.+/tests/runtime/errors/fixtures/tmp/nonexistent_directory': No such file or directory \\(os error 2\\)
\\s+at Object\\.rmdir \\(<anonymous>:\\d+:\\d+\\)
\\s+at default \\(/.+/invalid_directory_operation\\.ts:6:20\\)
\\s+at async myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "stat non-existent file"
script = "stat_nonexistent_file.ts"
expected_stdout = "Testing file stats on non-existent file\n"
expected_stderr_pattern = """\
Error: Failed to get file metadata for '.+/tests/runtime/errors/fixtures/tmp/definitely_nonexistent.txt': No such file or directory \\(os error 2\\)
\\s+at Object\\.stat \\(<anonymous>:\\d+:\\d+\\)
\\s+at default \\(/.+/stat_nonexistent_file\\.ts:6:21\\)
\\s+at async myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "invalid URL fetch"
script = "invalid_url_fetch.ts"
expected_stdout = "Testing invalid URL fetch\n"
expected_stderr_pattern = """\
Error: Failed to fetch URL: HTTP request failed: builder error: relative URL without a base
\\s+at Object\\.fetch \\(<anonymous>:\\d+:\\d+\\)
\\s+at default \\(/.+/invalid_url_fetch\\.ts:6:17\\)
\\s+at async myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "path traversal attack"
script = "path_traversal_attack.ts"
expected_stdout = "Testing path traversal attack\n"
expected_stderr_pattern = """\
Error: Path traversal not allowed \\(contains '\\.\\.'\\)
\\s+at Object\\.fetch \\(<anonymous>:\\d+:\\d+\\)
\\s+at default \\(/.+/path_traversal_attack\\.ts:6:23\\)
\\s+at async myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "URL injection attack"
script = "url_injection_attack.ts"
expected_stdout = "Testing URL injection attack\n"
expected_stderr_pattern = """\
Error: Full URLs not allowed in path parameter
\\s+at Object\\.fetch \\(<anonymous>:\\d+:\\d+\\)
\\s+at default \\(/.+/url_injection_attack\\.ts:6:23\\)
\\s+at async myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "protocol injection attack"
script = "protocol_injection_attack.ts"
expected_stdout = "Testing protocol injection attack\n"
expected_stderr_pattern = """\
Error: Full URLs not allowed in path parameter
\\s+at Object\\.fetch \\(<anonymous>:\\d+:\\d+\\)
\\s+at default \\(/.+/protocol_injection_attack\\.ts:6:23\\)
\\s+at async myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "network error non-existent domain"
script = "network_error_nonexistent_domain.ts"
expected_stdout = "Testing network error (non-existent domain)\n"
expected_stderr_pattern = """\
Error: Failed to fetch URL: HTTP request failed: error sending request for url \\(https://non-existent-domain-12345\\.com/\\): error trying to connect: dns error: failed to lookup address information: Name or service not known
\\s+at Object\\.fetch \\(<anonymous>:\\d+:\\d+\\)
\\s+at default \\(/.+/network_error_nonexistent_domain\\.ts:6:17\\)
\\s+at async myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 10000

[[tests]]
name = "Promise.reject error"
script = "promise_reject_error.ts"
expected_stdout = "Testing Promise.reject\n"
expected_stderr_pattern = """\
Error: Immediate rejection
\\s+at default \\(/.+/promise_reject_error\\.ts:5:26\\)
\\s+at myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "async function throwing"
script = "async_function_throwing.ts"
expected_stdout = "Testing async function throwing\n"
expected_stderr_pattern = """\
Error: Async function threw error
\\s+at throwingFunction \\(/.+/async_function_throwing\\.ts:7:15\\)
\\s+at async default \\(/.+/async_function_throwing\\.ts:11:5\\)
\\s+at async myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "Promise.all with rejection"
script = "promise_all_rejection.ts"
expected_stdout = "Testing Promise.all with rejection\n"
expected_stderr_pattern = """\
Error: Promise\\.all error
\\s+at /.+/promise_all_rejection\\.ts:8:24
\\s+at .+
\\s+at .+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "Promise.race with rejection"
script = "promise_race_rejection.ts"
expected_stdout = "Testing Promise.race with rejection\n"
expected_stderr_pattern = """\
Error: Fast rejection
\\s+at /.+/promise_race_rejection\\.ts:8:24
\\s+at .+
\\s+at .+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "TypeError uncaught"
script = "type_error_uncaught.ts"
expected_stdout = "Testing TypeError uncaught\n"
expected_stderr_pattern = """\
TypeError: Type error uncaught
\\s+at default \\(/.+/type_error_uncaught\\.ts:5:11\\)
\\s+at myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "ReferenceError uncaught"
script = "reference_error_uncaught.ts"
expected_stdout = "Testing ReferenceError uncaught\n"
expected_stderr_pattern = """\
ReferenceError: Reference error uncaught
\\s+at default \\(/.+/reference_error_uncaught\\.ts:5:11\\)
\\s+at myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "unhandled exception"
script = "unhandled_exception.ts"
expected_stdout = "Testing unhandled exception\n"
expected_stderr_pattern = """\
Error: This is an unhandled exception
\\s+at default \\(/.+/unhandled_exception\\.ts:3:11\\)
\\s+at myco:main:\\d+:\\d+
"""
expected_exit_code = 1
timeout_ms = 5000 