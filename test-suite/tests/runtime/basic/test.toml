name = "Basic JavaScript Runtime"
description = "Test basic JavaScript language features"

[[tests]]
name = "hello world"
script = "hello_world.ts"
expected_stdout = """\
Hello, World!
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "variable declarations"
script = "variables.ts"
expected_stdout = """\
Number: 42
String: Hello
Boolean: true
Sum: 50
Greeting: Hello, World!
Negation: false
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "functions and closures"
script = "functions.ts"
expected_stdout = """\
add(5, 3): 8
multiply(4, 7): 28
counter(): 1
counter(): 2
counter(): 3
applyTwice(double, 3): 12
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "objects and arrays"
script = "objects_arrays.ts"
expected_stdout = """\
numbers[0]: 1
names.length: 3
numbers after push: 1,2,3,4,5,6
doubled: 2,4,6,8,10,12
sum: 21
person.name: John
person['age']: 30
updated age: 31
new country: USA
keys: name,age,city,country
first user: Alice
user count: 2
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "control flow"
script = "control_flow.ts"
expected_stdout = """\
Adult
Grade: B
For loop:
  Iteration: 1
  Iteration: 2
  Iteration: 3
For...of loop:
  Fruit: apple
  Fruit: banana
  Fruit: orange
For...in loop:
  a: 1
  b: 2
  c: 3
While loop:
  Count: 0
  Count: 1
  Count: 2
Start of work week
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "error handling"
script = "error_handling.ts"
expected_stdout = """\
Before error
Caught error: Test error
In try block
In catch block: Another error
In finally block
Caught TypeError: TypeError
Caught ReferenceError: ReferenceError
Function threw: Function error
Inner catch: Inner error
Outer catch: Outer error
No error thrown
End of function
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "string operations"
script = "string_operations.ts"
expected_stdout = """\
Combined: Hello World
Length: 11
toUpperCase: JAVASCRIPT IS AWESOME
toLowerCase: javascript is awesome
indexOf 'is': 11
substring(0, 10): JavaScript
slice(-7): awesome
split words: JavaScript,is,awesome
includes 'fox': true
startsWith 'The': true
endsWith 'dog': true
replace 'fox' with 'cat': The quick brown cat jumps over the lazy dog
Template literal: Hello, my name is Alice and I am 25 years old.
Multiline length: 27
trimmed: "spaced"
trimStart: "spaced  "
trimEnd: "  spaced"
charAt(0): T
charAt(4): S
charCodeAt(0): 84
repeat: hahaha
padStart: 005
padEnd: 500
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "console functions"
script = "console_functions.ts"
expected_stdout_pattern = """\
Testing console\\.log:
Hello, World!
Number: 42
Boolean: true
Null: null
Undefined: undefined
Object: \\{"name":"test","value":123\\}
Array: \\[1,2,3\\]
Multiple arguments: string 42 true null
Testing console\\.info:
This is an info message
Info with details: version 1\\.0\\.0
Testing console\\.debug:
This is a debug message
Debug data: \\{"timestamp":"2024-01-01T00:00:00\\.000Z"\\}
Testing console\\.trace:
    at default \\(file:///.+/console_functions\\.ts:34:13\\)
    at <anonymous> \\(myco:main:\\d+:\\d+\\)
This is a trace message
    at default \\(file:///.+/console_functions\\.ts:35:13\\)
    at <anonymous> \\(myco:main:\\d+:\\d+\\)
Trace from inside function
    at testFunction \\(file:///.+/console_functions\\.ts:37:17\\)
    at default \\(file:///.+/console_functions\\.ts:39:5\\)
    at <anonymous> \\(myco:main:\\d+:\\d+\\)
"""
expected_stderr = """\
Testing console.error:
This is an error message
Error with number: 404
Testing console.warn:
This is a warning message
Warning with data: {"level":"high"}
Assertion failed: This assertion should fail
Assertion failed: Zero assertion should fail
Assertion failed: Empty string assertion should fail
Assertion failed: Null assertion should fail
Assertion failed: Undefined assertion should fail
Assertion failed: Failed assertion with multiple arguments
"""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "text encoding"
script = "text_encoding.ts"
expected_stdout = """\
Testing TextEncoder:
Encoded basic string length: 13
Encoded basic string type: Uint8Array
Encoded UTF-8 string length: 19
Encoded empty string length: 0
Testing TextDecoder:
Decoded basic string: Hello, World!
Basic string round-trip success: true
Decoded UTF-8 string: Hello, ä¸–ç•Œ! ðŸš€
UTF-8 string round-trip success: true
Decoded empty string: 
Empty string round-trip success: true
Decoded manual bytes: Hello
TextEncoder/TextDecoder tests completed
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "argv basic"
script = "argv.ts"
expected_stdout_pattern = """\
Testing Myco\\.argv:
argv is array: true
argv length: 3
First arg \\(program\\): .*/myco
argv\\[0\\]: .*/myco
argv\\[1\\]: run
argv\\[2\\]: .*argv\\.ts
No custom arguments provided
Argv test completed
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "argv with custom arguments"
script = "argv.ts"
args = ["--test", "arg1", "arg2"]
expected_stdout_pattern = """\
Testing Myco\\.argv:
argv is array: true
argv length: 6
First arg \\(program\\): .*/myco
argv\\[0\\]: .*/myco
argv\\[1\\]: run
argv\\[2\\]: .*argv\\.ts
argv\\[3\\]: --test
argv\\[4\\]: arg1
argv\\[5\\]: arg2
Custom arguments found:
  Custom arg 0: --test
  Custom arg 1: arg1
  Custom arg 2: arg2
Argv test completed
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "toml parser"
script = "toml_parser.ts"
expected_stdout = """\
Testing TOML.parse():
Basic TOML parsed:
  name: test-project
  version: 1.0.0
  debug: true
  count: 42
  pi: 3.14159
Array TOML parsed:
  numbers: [1,2,3,4,5]
  fruits: ["apple","banana","cherry"]
  mixed: [1,"hello",true]
Table TOML parsed:
  database.server: 192.168.1.1
  database.ports: [8001,8001,8002]
  database.enabled: true
  servers.alpha.ip: 10.0.0.1
  servers.beta.dc: eqdc10
Testing TOML.stringify():
Basic object stringified:
active = true
count = 100
name = "my-project"
score = 95.5
version = "2.0.0"

Array object stringified:
flags = [true, false, true]
names = ["Alice", "Bob", "Charlie"]
numbers = [1, 2, 3]

Nested object stringified:
[config]
host = "localhost"
port = 3000
ssl = false

[users.admin]
level = 10
name = "Administrator"

[users.guest]
level = 1
name = "Guest User"

Testing round-trip conversion:
Original title: TOML Example
Reparsed title: TOML Example
Round-trip title match: true
Original owner.name: Tom Preston-Werner
Reparsed owner.name: Tom Preston-Werner
Round-trip owner.name match: true
Original database.enabled: true
Reparsed database.enabled: true
Round-trip database.enabled match: true
TOML parser tests completed
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000

[[tests]]
name = "unhandled exception"
script = "unhandled_exception.ts"
expected_stdout_pattern = """\
Before throwing error
"""
expected_stderr_pattern = """\
Error: This is an unhandled exception
.*at.*unhandled_exception\\.ts.*"""
expected_exit_code = 1
timeout_ms = 5000

[[tests]]
name = "imports"
script = "imports.ts"
expected_stdout = """\
Testing imports:
Imported greeting: Hello from imported module!
add(10, 5): 15
numbers.length: 5
numbers[2]: 3
config.name: test-config
config.enabled: true
Default function: This is the default export
Class instance greeting: Hello, World!
All import tests completed successfully!
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 5000 