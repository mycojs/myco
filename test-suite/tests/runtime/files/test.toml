name = "File System Operations"
description = "Test Myco.Files interface including read/write operations, directory operations, and file execution"

[[tests]]
name = "basic file operations"
script = "basic_file_ops.ts"
expected_stdout = """\
Starting basic file operations test
File written successfully
File content read: Hello, Myco Files!
File stats - is_file: true, size: 18
File removed successfully
Testing UTF-8 encoding
UTF-8 content: Hello, ä¸–ç•Œ! ðŸš€
Testing raw encoding
Raw content length: 19
Testing relative path after changing directory
Relative read content: Hello, ä¸–ç•Œ! ðŸš€
Relative read content: new text
Basic file operations test completed
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 10000

[[tests]]
name = "sync vs async operations"
script = "sync_async_ops.ts"
expected_stdout = """\
Starting sync vs async operations test
Testing async operations
Async write completed
Async read result: Async content
Async stats - size: 13
Testing sync operations
Sync write completed
Sync read result: Sync content
Sync stats - size: 12
Testing mixed operations
Mixed content: Mixed async/sync content
Sync vs async operations test completed
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 10000

[[tests]]
name = "directory operations"
script = "directory_ops.ts"
expected_stdout = """\
Starting directory operations test
Created test file: test.txt
Created subdirectory
Created nested file: nested.txt
Directory listing:
  File: test.txt (size: 12)
  Dir: subdir
Subdirectory listing:
  File: nested.txt (size: 14)
Testing list options
Filtered files (*.txt): subdir/nested.txt, test.txt
Files only: subdir/nested.txt, test.txt
Dirs only: subdir
Testing recursive listing
Recursive files: subdir/nested.txt, test.txt
Testing recursive directory removal
Created complex nested directory structure
Files in deep structure: another/branch/file5.txt, another/file4.txt, file1.txt, nested/file2.txt, nested/structure/file3.txt
Recursively removed deep directory structure
Confirmed: deep directory completely removed
Created mixed content directory
Recursively removed mixed content directory
Cleaning up
Removed files and directories
Directory operations test completed
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 10000

[[tests]]
name = "file execution"
script = "file_execution.ts"
expected_stdout = """\
Starting file execution test
Executing script with no args
Exit code: 0
Stdout: Hello from script!

Stderr: 
Executing script with args
Exit code: 0
Stdout: Script args: arg1 arg2

Stderr: 
Testing sync execution
Sync exit code: 0
Sync stdout: Hello from script!

Testing directory execution
Dir exec exit code: 0
Dir exec stdout: Hello from script!

Testing relative path after changing directory
Relative exec exit code: 0
Relative exec stdout: Hello from script!

File execution test completed
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 10000

[[tests]]
name = "read-write tokens"
script = "readwrite_tokens.ts"
expected_stdout = """\
Starting read-write tokens test
Testing read-write token
Initial content written
Content read back: Initial content for read-write test
Content updated
Updated content: Updated content for read-write test
Testing read-write directory token
Directory file written
Directory file read: Directory file content
Directory file updated
Updated directory content: Updated directory content
Read-write tokens test completed
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 10000

[[tests]]
name = "advanced file operations"
script = "advanced_file_ops.ts"
expected_stdout = """\
Starting advanced file operations test
Testing large file operations
Large file written (1000 bytes)
Large file read successfully
Content matches: true
Testing binary data
Binary data written (256 bytes)
Binary data read successfully
Binary data matches: true
Testing concurrent operations
Concurrent files written: 5
Concurrent files read: 5
All contents match: true
Testing file metadata
File created
Modified time exists: true
File is_file: true
File is_dir: false
Advanced file operations test completed
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 15000

[[tests]]
name = "current working directory operations"
script = "cwd_ops.ts"
expected_stdout = """\
Starting current working directory test
Current working directory: */test-suite/tests/runtime/files
cwd() returns string type: true
cwd() returns absolute path: true
cwd() is consistent: true
Testing cwd in context of file operations
Created file with relative path
File content: Testing cwd context
Cleaned up test file
cwd unchanged after operations: true
Current working directory test completed
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 10000 

[[tests]]
name = "async operations"
script = "async_ops.ts"
expected_stdout = """\
Creating exec promise was fast
Awaiting exec promise took the expected amount of time
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 10000

[[tests]]
name = "PATH binary execution"
script = "path_binary_execution.ts"
expected_stdout = """\
Starting PATH binary execution test
Testing 'sh' binary from PATH
Successfully requested 'sh' token from PATH
Exit code: 0
Stdout: Hello from sh!

Stderr: 
Testing sync execution of PATH binary
Sync exit code: 0
Sync stdout: Sync hello from sh!

Testing traditional path-based execution still works
Path-based exit code: 0
Path-based stdout: Hello from script!

Testing non-existent binary error handling
Expected error for non-existent binary: Binary 'nonexistent_binary_12345' not found in PATH
Testing that paths with separators use traditional resolution
Expected error for non-existent path: File does not exist: */nonexistent/binary
PATH binary execution test completed successfully
"""
expected_stderr = ""
expected_exit_code = 0
timeout_ms = 15000
